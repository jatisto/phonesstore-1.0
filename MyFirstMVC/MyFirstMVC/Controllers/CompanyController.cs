using System.Linq;using System.Threading.Tasks;using Microsoft.AspNetCore.Mvc;using Microsoft.AspNetCore.Mvc.Rendering;using Microsoft.EntityFrameworkCore;using MyFirstMVC.Models;namespace MyFirstMVC.Controllers{    public class CompanyController : Controller    {        private readonly ApplicationDbContext _context;        public CompanyController(ApplicationDbContext context)        {            _context = context;        }        // GET: Company        public IActionResult Index()        {            var companies = _context.Companies.Include(c => c._Company);            return View(companies);        }        // GET: Categories/Create        public IActionResult Create()        {            ViewData["_CompanyId"] = new SelectList(_context.Companies, "Id", "Name");            return View();        }        [HttpPost]        [ValidateAntiForgeryToken]        public async Task<IActionResult> Create(Company company)        {            if (ModelState.IsValid)            {                _context.Companies.Add(company);                await _context.SaveChangesAsync();                return RedirectToAction(nameof(Index));            }            ViewData["_CompanyId"] = new SelectList(_context.Companies, "Id", "Id", company._CompanyId);            return View(company);        }        // GET: Phones/Edit        public async Task<IActionResult> Edit(int? id)        {            if (id == null)            {                return NotFound();            }            var company = await _context.Companies.FindAsync(id);            if (company == null)            {                return NotFound();            }            ViewData["_CompanyId"] = new SelectList(_context.Companies, "Id", "Id", company._CompanyId);            return View(company);        }        [HttpPost]        [ValidateAntiForgeryToken]        public async Task<IActionResult> Edit(int id,            [Bind("Id,Name,_emailCompany,_dataCreateCompany, _CompanyId")]            Company company)        {            if (id != company.Id)            {                return NotFound();            }            if (ModelState.IsValid)            {                try                {                    _context.Update(company);                    await _context.SaveChangesAsync();                }                catch (DbUpdateConcurrencyException)                {                    if (!CompanyExists(company.Id))                    {                        return NotFound();                    }                    else                    {                        throw;                    }                }                return RedirectToAction(nameof(Index));            }            ViewData["_CompanyId"] = new SelectList(_context.Categories, "Id", "Id", company._CompanyId);            return View(company);        }        private bool CompanyExists(int id)        {            return _context.Companies.Any(e => e.Id == id);        }    }}